// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: files.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File  []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FCode string `protobuf:"bytes,3,opt,name=f_code,json=fCode,proto3" json:"f_code,omitempty"`
}

func (x *CheckRequest) Reset() {
	*x = CheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRequest) ProtoMessage() {}

func (x *CheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRequest.ProtoReflect.Descriptor instead.
func (*CheckRequest) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{0}
}

func (x *CheckRequest) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *CheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckRequest) GetFCode() string {
	if x != nil {
		return x.FCode
	}
	return ""
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XFilePath  string `protobuf:"bytes,1,opt,name=x_file_path,json=xFilePath,proto3" json:"x_file_path,omitempty"`
	FileData   []byte `protobuf:"bytes,2,opt,name=file_data,json=fileData,proto3" json:"file_data,omitempty"`
	FileName   string `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	XMountPath string `protobuf:"bytes,4,opt,name=x_mount_path,json=xMountPath,proto3" json:"x_mount_path,omitempty"`
	XType      string `protobuf:"bytes,5,opt,name=x_type,json=xType,proto3" json:"x_type,omitempty"`
	IsReplace  bool   `protobuf:"varint,6,opt,name=is_replace,json=isReplace,proto3" json:"is_replace,omitempty"`
	FCode      string `protobuf:"bytes,7,opt,name=f_code,json=fCode,proto3" json:"f_code,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRequest) GetXFilePath() string {
	if x != nil {
		return x.XFilePath
	}
	return ""
}

func (x *CreateRequest) GetFileData() []byte {
	if x != nil {
		return x.FileData
	}
	return nil
}

func (x *CreateRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *CreateRequest) GetXMountPath() string {
	if x != nil {
		return x.XMountPath
	}
	return ""
}

func (x *CreateRequest) GetXType() string {
	if x != nil {
		return x.XType
	}
	return ""
}

func (x *CreateRequest) GetIsReplace() bool {
	if x != nil {
		return x.IsReplace
	}
	return false
}

func (x *CreateRequest) GetFCode() string {
	if x != nil {
		return x.FCode
	}
	return ""
}

type DescribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocateFile string `protobuf:"bytes,1,opt,name=locate_file,json=locateFile,proto3" json:"locate_file,omitempty"`
	FCode      string `protobuf:"bytes,2,opt,name=f_code,json=fCode,proto3" json:"f_code,omitempty"`
}

func (x *DescribeRequest) Reset() {
	*x = DescribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescribeRequest) ProtoMessage() {}

func (x *DescribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescribeRequest.ProtoReflect.Descriptor instead.
func (*DescribeRequest) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{2}
}

func (x *DescribeRequest) GetLocateFile() string {
	if x != nil {
		return x.LocateFile
	}
	return ""
}

func (x *DescribeRequest) GetFCode() string {
	if x != nil {
		return x.FCode
	}
	return ""
}

type ModifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileName  string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	IsReplace bool   `protobuf:"varint,3,opt,name=is_replace,json=isReplace,proto3" json:"is_replace,omitempty"`
	FCode     string `protobuf:"bytes,4,opt,name=f_code,json=fCode,proto3" json:"f_code,omitempty"`
}

func (x *ModifyRequest) Reset() {
	*x = ModifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyRequest) ProtoMessage() {}

func (x *ModifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyRequest.ProtoReflect.Descriptor instead.
func (*ModifyRequest) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{3}
}

func (x *ModifyRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *ModifyRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *ModifyRequest) GetIsReplace() bool {
	if x != nil {
		return x.IsReplace
	}
	return false
}

func (x *ModifyRequest) GetFCode() string {
	if x != nil {
		return x.FCode
	}
	return ""
}

type CopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalFilePath string `protobuf:"bytes,1,opt,name=original_file_path,json=originalFilePath,proto3" json:"original_file_path,omitempty"`
	NewFilePath      string `protobuf:"bytes,2,opt,name=new_file_path,json=newFilePath,proto3" json:"new_file_path,omitempty"`
	FCode            string `protobuf:"bytes,3,opt,name=f_code,json=fCode,proto3" json:"f_code,omitempty"`
}

func (x *CopyRequest) Reset() {
	*x = CopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyRequest) ProtoMessage() {}

func (x *CopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyRequest.ProtoReflect.Descriptor instead.
func (*CopyRequest) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{4}
}

func (x *CopyRequest) GetOriginalFilePath() string {
	if x != nil {
		return x.OriginalFilePath
	}
	return ""
}

func (x *CopyRequest) GetNewFilePath() string {
	if x != nil {
		return x.NewFilePath
	}
	return ""
}

func (x *CopyRequest) GetFCode() string {
	if x != nil {
		return x.FCode
	}
	return ""
}

type MoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalFilePath string `protobuf:"bytes,1,opt,name=original_file_path,json=originalFilePath,proto3" json:"original_file_path,omitempty"`
	NewFilePath      string `protobuf:"bytes,2,opt,name=new_file_path,json=newFilePath,proto3" json:"new_file_path,omitempty"`
	FCode            string `protobuf:"bytes,3,opt,name=f_code,json=fCode,proto3" json:"f_code,omitempty"`
}

func (x *MoveRequest) Reset() {
	*x = MoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveRequest) ProtoMessage() {}

func (x *MoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveRequest.ProtoReflect.Descriptor instead.
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{5}
}

func (x *MoveRequest) GetOriginalFilePath() string {
	if x != nil {
		return x.OriginalFilePath
	}
	return ""
}

func (x *MoveRequest) GetNewFilePath() string {
	if x != nil {
		return x.NewFilePath
	}
	return ""
}

func (x *MoveRequest) GetFCode() string {
	if x != nil {
		return x.FCode
	}
	return ""
}

type FileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Err  string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	Biz  string `protobuf:"bytes,3,opt,name=biz,proto3" json:"biz,omitempty"`
}

func (x *FileReply) Reset() {
	*x = FileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileReply) ProtoMessage() {}

func (x *FileReply) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileReply.ProtoReflect.Descriptor instead.
func (*FileReply) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{6}
}

func (x *FileReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FileReply) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *FileReply) GetBiz() string {
	if x != nil {
		return x.Biz
	}
	return ""
}

type FileStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Err  string `protobuf:"bytes,2,opt,name=err,proto3" json:"err,omitempty"`
	File []byte `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *FileStream) Reset() {
	*x = FileStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_files_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileStream) ProtoMessage() {}

func (x *FileStream) ProtoReflect() protoreflect.Message {
	mi := &file_files_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileStream.ProtoReflect.Descriptor instead.
func (*FileStream) Descriptor() ([]byte, []int) {
	return file_files_proto_rawDescGZIP(), []int{7}
}

func (x *FileStream) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *FileStream) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *FileStream) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

var File_files_proto protoreflect.FileDescriptor

var file_files_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4e, 0x0a,
	0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xd9, 0x01,
	0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0b, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x78, 0x5f,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x78, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06,
	0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x10, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x77, 0x0a, 0x0c, 0x63, 0x6f, 0x70, 0x79,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69,
	0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x77, 0x0a, 0x0c, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x44, 0x0a, 0x0a, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x69, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x69, 0x7a,
	0x22, 0x47, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x32, 0x9d, 0x02, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0e, 0x2e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x08, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x0d, 0x2e, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x28, 0x0a, 0x08, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x0d, 0x2e, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0b, 0x2e, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_files_proto_rawDescOnce sync.Once
	file_files_proto_rawDescData = file_files_proto_rawDesc
)

func file_files_proto_rawDescGZIP() []byte {
	file_files_proto_rawDescOnce.Do(func() {
		file_files_proto_rawDescData = protoimpl.X.CompressGZIP(file_files_proto_rawDescData)
	})
	return file_files_proto_rawDescData
}

var file_files_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_files_proto_goTypes = []interface{}{
	(*CheckRequest)(nil),    // 0: check_request
	(*CreateRequest)(nil),   // 1: create_request
	(*DescribeRequest)(nil), // 2: describe_request
	(*ModifyRequest)(nil),   // 3: modify_request
	(*CopyRequest)(nil),     // 4: copy_request
	(*MoveRequest)(nil),     // 5: move_request
	(*FileReply)(nil),       // 6: file_reply
	(*FileStream)(nil),      // 7: file_stream
}
var file_files_proto_depIdxs = []int32{
	0, // 0: FileWorker.healthCheck:input_type -> check_request
	2, // 1: FileWorker.describeFile:input_type -> describe_request
	1, // 2: FileWorker.createFile:input_type -> create_request
	3, // 3: FileWorker.modifyFile:input_type -> modify_request
	4, // 4: FileWorker.copyFile:input_type -> copy_request
	5, // 5: FileWorker.moveFile:input_type -> move_request
	6, // 6: FileWorker.healthCheck:output_type -> file_reply
	7, // 7: FileWorker.describeFile:output_type -> file_stream
	6, // 8: FileWorker.createFile:output_type -> file_reply
	6, // 9: FileWorker.modifyFile:output_type -> file_reply
	6, // 10: FileWorker.copyFile:output_type -> file_reply
	6, // 11: FileWorker.moveFile:output_type -> file_reply
	6, // [6:12] is the sub-list for method output_type
	0, // [0:6] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_files_proto_init() }
func file_files_proto_init() {
	if File_files_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_files_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_files_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_files_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_files_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_files_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_files_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_files_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_files_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_files_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_files_proto_goTypes,
		DependencyIndexes: file_files_proto_depIdxs,
		MessageInfos:      file_files_proto_msgTypes,
	}.Build()
	File_files_proto = out.File
	file_files_proto_rawDesc = nil
	file_files_proto_goTypes = nil
	file_files_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FileWorkerClient is the client API for FileWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FileWorkerClient interface {
	HealthCheck(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*FileReply, error)
	DescribeFile(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*FileStream, error)
	CreateFile(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*FileReply, error)
	ModifyFile(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*FileReply, error)
	CopyFile(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*FileReply, error)
	MoveFile(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*FileReply, error)
}

type fileWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileWorkerClient(cc grpc.ClientConnInterface) FileWorkerClient {
	return &fileWorkerClient{cc}
}

func (c *fileWorkerClient) HealthCheck(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/FileWorker/healthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileWorkerClient) DescribeFile(ctx context.Context, in *DescribeRequest, opts ...grpc.CallOption) (*FileStream, error) {
	out := new(FileStream)
	err := c.cc.Invoke(ctx, "/FileWorker/describeFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileWorkerClient) CreateFile(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/FileWorker/createFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileWorkerClient) ModifyFile(ctx context.Context, in *ModifyRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/FileWorker/modifyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileWorkerClient) CopyFile(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/FileWorker/copyFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileWorkerClient) MoveFile(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*FileReply, error) {
	out := new(FileReply)
	err := c.cc.Invoke(ctx, "/FileWorker/moveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileWorkerServer is the server API for FileWorker service.
type FileWorkerServer interface {
	HealthCheck(context.Context, *CheckRequest) (*FileReply, error)
	DescribeFile(context.Context, *DescribeRequest) (*FileStream, error)
	CreateFile(context.Context, *CreateRequest) (*FileReply, error)
	ModifyFile(context.Context, *ModifyRequest) (*FileReply, error)
	CopyFile(context.Context, *CopyRequest) (*FileReply, error)
	MoveFile(context.Context, *MoveRequest) (*FileReply, error)
}

// UnimplementedFileWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedFileWorkerServer struct {
}

func (*UnimplementedFileWorkerServer) HealthCheck(context.Context, *CheckRequest) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedFileWorkerServer) DescribeFile(context.Context, *DescribeRequest) (*FileStream, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeFile not implemented")
}
func (*UnimplementedFileWorkerServer) CreateFile(context.Context, *CreateRequest) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (*UnimplementedFileWorkerServer) ModifyFile(context.Context, *ModifyRequest) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyFile not implemented")
}
func (*UnimplementedFileWorkerServer) CopyFile(context.Context, *CopyRequest) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyFile not implemented")
}
func (*UnimplementedFileWorkerServer) MoveFile(context.Context, *MoveRequest) (*FileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}

func RegisterFileWorkerServer(s *grpc.Server, srv FileWorkerServer) {
	s.RegisterService(&_FileWorker_serviceDesc, srv)
}

func _FileWorker_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileWorkerServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileWorker/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileWorkerServer).HealthCheck(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileWorker_DescribeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileWorkerServer).DescribeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileWorker/DescribeFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileWorkerServer).DescribeFile(ctx, req.(*DescribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileWorker_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileWorkerServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileWorker/CreateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileWorkerServer).CreateFile(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileWorker_ModifyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileWorkerServer).ModifyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileWorker/ModifyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileWorkerServer).ModifyFile(ctx, req.(*ModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileWorker_CopyFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileWorkerServer).CopyFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileWorker/CopyFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileWorkerServer).CopyFile(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileWorker_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileWorkerServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FileWorker/MoveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileWorkerServer).MoveFile(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FileWorker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FileWorker",
	HandlerType: (*FileWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "healthCheck",
			Handler:    _FileWorker_HealthCheck_Handler,
		},
		{
			MethodName: "describeFile",
			Handler:    _FileWorker_DescribeFile_Handler,
		},
		{
			MethodName: "createFile",
			Handler:    _FileWorker_CreateFile_Handler,
		},
		{
			MethodName: "modifyFile",
			Handler:    _FileWorker_ModifyFile_Handler,
		},
		{
			MethodName: "copyFile",
			Handler:    _FileWorker_CopyFile_Handler,
		},
		{
			MethodName: "moveFile",
			Handler:    _FileWorker_MoveFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "files.proto",
}
